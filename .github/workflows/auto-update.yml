name: Check Firebase InAppMessaging Version

on:
  schedule:
    - cron: '0 0 * * 1' # Run every Monday at 00:00 UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4
        with:
          repository: AhmedNader65/firebase-android-sdk
          path: your-repo

      - name: Checkout original repository
        uses: actions/checkout@v4
        with:
          repository: firebase/firebase-android-sdk
          path: original-repo

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Find latest release branch
        id: find-branch
        run: |
          cd original-repo
          LATEST_BRANCH=$(git branch -r | grep 'origin/releases/' | sort -V | tail -n 1 | sed 's|origin/||')
          echo "Latest release branch: $LATEST_BRANCH"
          git checkout $LATEST_BRANCH
          echo "branch=$LATEST_BRANCH" >> $GITHUB_OUTPUT
        shell: bash

      - name: Compare versions
        id: compare-versions
        run: |
          YOUR_VERSION=$(grep '^version=' your-repo/firebase-inappmessaging/gradle.properties | cut -d'=' -f2)
          ORIGINAL_VERSION=$(grep '^version=' original-repo/firebase-inappmessaging/gradle.properties | cut -d'=' -f2)
          echo "Your version: $YOUR_VERSION"
          echo "Original version: $ORIGINAL_VERSION"
          if [ "$YOUR_VERSION" != "$ORIGINAL_VERSION" ]; then
            echo "Versions differ. Proceeding with update."
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "new_version=$ORIGINAL_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Versions are the same. No update needed."
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Pull and merge changes
        id: pull-changes
        if: steps.compare-versions.outputs.update_needed == 'true'
        run: |
          cd your-repo
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git checkout main
          git checkout -b update-firebase-inappmessaging-${{ steps.compare-versions.outputs.new_version }}
          
          # Copy firebase-inappmessaging from original repo
          rm -rf firebase-inappmessaging
          cp -r ../original-repo/firebase-inappmessaging .
          
          # Add and commit changes
          git add firebase-inappmessaging
          git commit -m "Update firebase-inappmessaging to version ${{ steps.compare-versions.outputs.new_version }}"
          
          # Try to merge into main
          git checkout main
          MERGE_RESULT=$(git merge --no-commit --no-ff update-firebase-inappmessaging-${{ steps.compare-versions.outputs.new_version }} 2>&1 || true)
          if echo "$MERGE_RESULT" | grep -q "CONFLICT"; then
            echo "Merge conflict detected!"
            echo "conflict_detected=true" >> $GITHUB_OUTPUT
            git merge --abort
          else
            echo "Merge successful."
            echo "conflict_detected=false" >> $GITHUB_OUTPUT
            git merge --continue
            git push origin main
          fi
        shell: bash

      - name: Notify on merge conflict
        if: steps.compare-versions.outputs.update_needed == 'true' && steps.pull-changes.outputs.conflict_detected == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const title = `Merge Conflict: firebase-inappmessaging v${{ steps.compare-versions.outputs.new_version }}`;
            const body = `A merge conflict occurred while trying to update firebase-inappmessaging to version ${{ steps.compare-versions.outputs.new_version }} from branch ${{ steps.find-branch.outputs.branch }}. Please resolve manually.`;
            await github.rest.issues.create({
              owner,
              repo,
              title,
              body
            });
            console.log('Created issue for merge conflict.');

      - name: Create new JitPack version
        if: steps.compare-versions.outputs.update_needed == 'true' && steps.pull-changes.outputs.conflict_detected == 'false'
        run: |
          cd your-repo
          git tag ${{ steps.compare-versions.outputs.new_version }}
          git push origin ${{ steps.compare-versions.outputs.new_version }}
          echo "Created and pushed tag ${{ steps.compare-versions.outputs.new_version }} for JitPack."
        shell: bash